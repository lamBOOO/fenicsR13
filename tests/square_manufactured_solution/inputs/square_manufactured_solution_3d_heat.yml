# General
# =======
# - output_folder: Used as output folder
output_folder: square_manufactured_solution_3d_heat

# Meshes
# ======
# - meshes: List of input meshes in h5 format to run simulations on
meshes:
  - meshes/cube2.h5
  - meshes/cube3.h5
  # - meshes/cube4.h5
  # - meshes/cube5.h5

# Numerical Parameters
# ====================
# - elements: Must contain the fields: theta, s, p, u, sigma
#   - fields: List of FEM parameters (shape, degree)
#     - shape: Element shape, e.g. Lagrange
#     - degree: Element degree, e.g. 2
# - stabilization: Must contain cip and gls
#   - cip: Collection of Continous Interior Penalty (CIP) parameters
#     - enable: Enable CIP stabilization
#     - delta_theta: Stabilization of grad(T)*grad(T_test) over edge
#     - delta_u: Stabilization of grad(u)*grad(u_test) over edge
#     - delta_p: Stabilization of grad(p)*grad(p_test) over edge
#   - gls: Collection of Garlerkin Least Squares (GLS) parameters
#     - enable: Enable GLS stabilization
#     - tau_energy: Stabilization with energy eq. residual
#     - tau_heatflux: Stabilization with heatflu_x_w eq. residual
#     - tau_mass: Stabilization with mass eq. residual
#     - tau_momentum: Stabilization with momentum eq. residual
#     - tau_stress: Stabilization with stress eq. residual
elements:
  theta:
    shape: Lagrange
    degree: 1
  s:
    shape: Lagrange
    degree: 2
  p:
    shape: Lagrange
    degree: 1
  u:
    shape: Lagrange
    degree: 1
  sigma:
    shape: Lagrange
    degree: 2
stabilization:
  cip:
    enable: False
    delta_theta: 1.0
    delta_u: 1.0
    delta_p: 0.1
  gls:
    enable: False
    tau_energy: 0.001
    tau_heatflux: 0.001
    tau_mass: 0.01
    tau_momentum: 0.01
    tau_stress: 0.01

# Formulation Parameters
# ======================
# - nsd: Number of spatial dimensions == 2
# - mode: Formulation mode, one of heat, stress, r13
# - heat_source: Heat source function for mode==heat||r13
# - mass_source: Mass source function for mode==stress||r13
# - body_force: Body force for mode==stress||r13
# - f_s: Heatflux force for mode==heat||r13
# - f_sigma: Stress force for mode==stress||r13
nsd: 3
mode: heat
heat_source: "2*(-1 + x[0])*x[0]*(-1 + x[1])*x[1]*(-1 + x[2])*x[2]*((-1 + x[0])*x[0]*(-1 + x[1])*x[1]*(-1 + x[2]) + (-1 + x[0])*x[0]*(-1 + x[1])*x[1]*x[2] + (-1 + x[0])*x[0]*(-1 + x[1])*(-1 + x[2])*x[2] + (-1 + x[0])*x[0]*x[1]*(-1 + x[2])*x[2] + (-1 + x[0])*(-1 + x[1])*x[1]*(-1 + x[2])*x[2] + x[0]*(-1 + x[1])*x[1]*(-1 + x[2])*x[2])"
mass_source: 0
body_force: [0, 0, 0]
f_s: [
  "(-96*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 6*x[0]*(-1 + x[1])*x[1]*(-1 + x[2])*x[2]*(8*(-1 + x[2])*x[2] + x[1]*(-8 + 103*x[2] - 87*std::pow(x[2],2)) + std::pow(x[1],2)*(8 - 87*x[2] + 71*std::pow(x[2],2))) + 4*std::pow(x[0],4)*(-18*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 108*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],2)*(-18 + 108*x[2] - 211*std::pow(x[2],2) + 206*std::pow(x[2],3) - 103*std::pow(x[2],4)) + std::pow(x[1],3)*(36 - 216*x[2] + 206*std::pow(x[2],2) + 20*std::pow(x[2],3) - 10*std::pow(x[2],4)) + std::pow(x[1],4)*(-18 + 108*x[2] - 103*std::pow(x[2],2) - 10*std::pow(x[2],3) + 5*std::pow(x[2],4))) - 4*std::pow(x[0],3)*(-36*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 240*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],2)*(-36 + 240*x[2] - 491*std::pow(x[2],2) + 454*std::pow(x[2],3) - 203*std::pow(x[2],4)) + std::pow(x[1],3)*(72 - 480*x[2] + 454*std::pow(x[2],2) + 148*std::pow(x[2],3) - 122*std::pow(x[2],4)) + std::pow(x[1],4)*(-36 + 240*x[2] - 203*std::pow(x[2],2) - 122*std::pow(x[2],3) + 85*std::pow(x[2],4))) + 2*std::pow(x[0],2)*(-36*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 288*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],2)*(-36 + 288*x[2] - 917*std::pow(x[2],2) + 1114*std::pow(x[2],3) - 485*std::pow(x[2],4)) + std::pow(x[1],4)*(-36 + 288*x[2] - 485*std::pow(x[2],2) + 250*std::pow(x[2],3) - 53*std::pow(x[2],4)) + 2*std::pow(x[1],3)*(36 - 288*x[2] + 557*std::pow(x[2],2) - 394*std::pow(x[2],3) + 125*std::pow(x[2],4))))/75.",
  "(-72*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 48*x[0]*x[1]*(-1 + 12*x[1] - 20*std::pow(x[1],2) + 9*std::pow(x[1],3))*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 4*std::pow(x[0],3)*(-48*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 3*x[1]*x[2]*(-8 + 103*x[2] - 174*std::pow(x[2],2) + 79*std::pow(x[2],3)) + std::pow(x[1],2)*(-36 + 288*x[2] - 557*std::pow(x[2],2) + 394*std::pow(x[2],3) - 125*std::pow(x[2],4)) + std::pow(x[1],3)*(72 - 480*x[2] + 454*std::pow(x[2],2) + 148*std::pow(x[2],3) - 122*std::pow(x[2],4)) + 2*std::pow(x[1],4)*(-18 + 108*x[2] - 103*std::pow(x[2],2) - 10*std::pow(x[2],3) + 5*std::pow(x[2],4))) + 2*std::pow(x[0],4)*(-48*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 3*x[1]*x[2]*(-8 + 95*x[2] - 158*std::pow(x[2],2) + 71*std::pow(x[2],3)) + std::pow(x[1],3)*(72 - 480*x[2] + 406*std::pow(x[2],2) + 244*std::pow(x[2],3) - 170*std::pow(x[2],4)) + std::pow(x[1],2)*(-36 + 288*x[2] - 485*std::pow(x[2],2) + 250*std::pow(x[2],3) - 53*std::pow(x[2],4)) + 2*std::pow(x[1],4)*(-18 + 108*x[2] - 103*std::pow(x[2],2) - 10*std::pow(x[2],3) + 5*std::pow(x[2],4))) - 2*std::pow(x[0],2)*(48*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 3*x[1]*x[2]*(-8 + 119*x[2] - 206*std::pow(x[2],2) + 95*std::pow(x[2],3)) + std::pow(x[1],3)*(-72 + 480*x[2] - 982*std::pow(x[2],2) + 908*std::pow(x[2],3) - 406*std::pow(x[2],4)) + std::pow(x[1],4)*(36 - 216*x[2] + 422*std::pow(x[2],2) - 412*std::pow(x[2],3) + 206*std::pow(x[2],4)) + std::pow(x[1],2)*(36 - 288*x[2] + 917*std::pow(x[2],2) - 1114*std::pow(x[2],3) + 485*std::pow(x[2],4))))/75.",
  "(-72*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 48*x[0]*std::pow(-1 + x[1],2)*std::pow(x[1],2)*x[2]*(-1 + 12*x[2] - 20*std::pow(x[2],2) + 9*std::pow(x[2],3)) + 2*std::pow(x[0],4)*(-36*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 24*x[1]*x[2]*(-1 + 12*x[2] - 20*std::pow(x[2],2) + 9*std::pow(x[2],3)) + std::pow(x[1],2)*(-48 + 285*x[2] - 485*std::pow(x[2],2) + 406*std::pow(x[2],3) - 206*std::pow(x[2],4)) + std::pow(x[1],3)*(96 - 474*x[2] + 250*std::pow(x[2],2) + 244*std::pow(x[2],3) - 20*std::pow(x[2],4)) + std::pow(x[1],4)*(-48 + 213*x[2] - 53*std::pow(x[2],2) - 170*std::pow(x[2],3) + 10*std::pow(x[2],4))) - 4*std::pow(x[0],3)*(-36*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 24*x[1]*x[2]*(-1 + 12*x[2] - 20*std::pow(x[2],2) + 9*std::pow(x[2],3)) + std::pow(x[1],2)*(-48 + 309*x[2] - 557*std::pow(x[2],2) + 454*std::pow(x[2],3) - 206*std::pow(x[2],4)) + std::pow(x[1],3)*(96 - 522*x[2] + 394*std::pow(x[2],2) + 148*std::pow(x[2],3) - 20*std::pow(x[2],4)) + std::pow(x[1],4)*(-48 + 237*x[2] - 125*std::pow(x[2],2) - 122*std::pow(x[2],3) + 10*std::pow(x[2],4))) - 2*std::pow(x[0],2)*(36*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 24*x[1]*x[2]*(-1 + 12*x[2] - 20*std::pow(x[2],2) + 9*std::pow(x[2],3)) - 2*std::pow(x[1],3)*(48 - 309*x[2] + 557*std::pow(x[2],2) - 454*std::pow(x[2],3) + 206*std::pow(x[2],4)) + std::pow(x[1],4)*(48 - 285*x[2] + 485*std::pow(x[2],2) - 406*std::pow(x[2],3) + 206*std::pow(x[2],4)) + std::pow(x[1],2)*(48 - 357*x[2] + 917*std::pow(x[2],2) - 982*std::pow(x[2],3) + 422*std::pow(x[2],4))))/75."
]
f_sigma: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]

# PETSc Options (dictionary)
# ==========================
# [#1 e.g. for mumps directy solver:]
# - ksp_type: preonly  # preconditioner only, i.e. 1 application
# - pc_type: lu  # use LU as preconditioner <=> direct solve
# - pc_factor_mat_solver_type: mumps  # use mumps sparse solver
# [#2 e.g. for gmres iterative solver with icc preconditioner:]
# - ksp_type: gmres  # Generalized Minimal Residual Method
# - pc_type: icc  # incomplete Cholesky
petsc_options:
  ksp_type: tfqmr
  ksp_rtol: 1E-7
  ksp_max_it: 100000
  ksp_view:
  ksp_monitor_true_residual:
  pc_type: fieldsplit
  pc_fieldsplit_detect_saddle_point:
  # option 1:
  pc_fieldsplit_type: schur
  pc_fieldsplit_schur_fact_type: full
  pc_fieldsplit_schur_precondition: selfp
  fieldsplit_0_ksp_type: preonly
  fieldsplit_0_pc_type: gamg
  fieldsplit_0_pc_gamg_type: classical
  fieldsplit_1_ksp_type: preonly
  fieldsplit_1_pc_type: jacobi

# Region Parameters
# =================
# - regs: Dictionary of all mesh regions
#   - reg_id: Must contain the following parameters:
#     - kn: Knudsen number
regs:
  6000:
    kn: 1.0

# Boundary Conditions
# ===================
# - polar_coord_syst: true needs u_n_w,u_t_w; false needs u_x_w,u_y_w,u_z_w
# - bcs: Dictionary of all boundary IDs from mesh
#   - bc_id: must contain the following parameters
#     - chi_tilde: Refaction coefficient in Maxwell accomodation model
#     - theta_w: Value for temperature at wall
#     - u_t_w: Value for tangential velocity at wall (for polar_coord_syst=true)
#     - u_n_w: Value for normal velocity at wall (for polar_coord_syst=true)
#     - u_x_w: Value for x-velocity at wall (for polar_coord_syst=false)
#     - u_y_w: Value for y-velocity at wall (for polar_coord_syst=false)
#     - u_z_w: Value for z-velocity at wall (for polar_coord_syst=false&&nsd=3)
#     - p_w: Value for pressure at wall
#     - epsilon_w: Inflow-model parameter <=> Weight of pressure prescription
polar_coord_syst: False
bcs:
  4000:
    chi_tilde: 1
    theta_w: 0
    u_t_w: 0
    u_n_w: 0
    u_x_w: 0
    u_y_w: 0
    u_z_w: 0
    p_w: 0
    epsilon_w: 0
  4001: # right
    chi_tilde: 1
    theta_w: 0
    u_t_w: 0
    u_n_w: 0
    u_x_w: 0
    u_y_w: 0
    u_z_w: 0
    p_w: 0
    epsilon_w: 0
  4002: # bot
    chi_tilde: 1
    theta_w: 0
    u_t_w: 0
    u_n_w: 0
    u_x_w: 0
    u_y_w: 0
    u_z_w: 0
    p_w: 0
    epsilon_w: 0
  4003:
    chi_tilde: 1
    theta_w: 0
    u_t_w: 0
    u_n_w: 0
    u_x_w: 0
    u_y_w: 0
    u_z_w: 0
    p_w: 0
    epsilon_w: 0
  4004:
    chi_tilde: 1
    theta_w: 0
    u_t_w: 0
    u_n_w: 0
    u_x_w: 0
    u_y_w: 0
    u_z_w: 0
    p_w: 0
    epsilon_w: 0
  4005:
    chi_tilde: 1
    theta_w: 0
    u_t_w: 0
    u_n_w: 0
    u_x_w: 0
    u_y_w: 0
    u_z_w: 0
    p_w: 0
    epsilon_w: 0

# Convergence Study
# =================
# - enable: Enable convergence study on given meshes
# - exact_solution: Path to exact solution in cpp-format to compare errors
# - plot: Show errors in matplotlib window. PDF output is always per default.
# - write_systemmatrix: Writes out systemmatrix (LHS) to use for analysis
# - rescale_pressure: Shift numerical pressure (False,zeromean,zerominimum)
# - relative_errors: Use relative errors. If exact sol. is zero, use absolute.
convergence_study:
  enable: True
  exact_solution: esols/3d.cpp
  plot: False # to avoid error exit code due to $DISPLAY
  write_systemmatrix: False
  rescale_pressure: zerominimum
  relative_error: True

# Postprocessing
# ==============
# - write_pdfs: Write all solution fields as PDF plot
# - write_vecs: Write all solution fields as vectors
# - flows: List of BC IDs for <mass|heat> flow J=int_bc dot(<u|s>,n)dl
# - line_integrals: List of line integral dicts:
#   - name: Name for output
#   - expr: Expression to evaluate
#   - start: Start point
#   - end: End point
#   - res: Sampling resolution of line
postprocessing:
  write_pdfs: False
  write_vecs: False
  flows: []
  line_integrals: []

# Parameter Study
# ==============
# - enable: Repeat simulation with different p. values (study)
# - parameter_key: Key as list, e.g. ["elemenets", "p", "degree"]
# - parameter_values: List of value for parameter, e.g. [0.01,0.1,1,10]
parameter_study:
  enable: False
  parameter_key: []
  parameter_values: []
