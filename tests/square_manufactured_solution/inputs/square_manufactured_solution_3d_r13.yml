# General
# =======
# - output_folder: Used as output folder
output_folder: square_manufactured_solution_3d_r13

# Meshes
# ======
# - meshes: List of input meshes in h5 format to run simulations on
meshes:
  - meshes/cube2.h5
  - meshes/cube3.h5
  # - meshes/cube4.h5
  # - meshes/cube5.h5

# Numerical Parameters
# ====================
# - elements: Must contain the fields: theta, s, p, u, sigma
#   - fields: List of FEM parameters (shape, degree)
#     - shape: Element shape, e.g. Lagrange
#     - degree: Element degree, e.g. 2
# - stabilization: Must contain cip and gls
#   - cip: Collection of Continous Interior Penalty (CIP) parameters
#     - enable: Enable CIP stabilization
#     - delta_theta: Stabilization of grad(T)*grad(T_test) over edge
#     - delta_u: Stabilization of grad(u)*grad(u_test) over edge
#     - delta_p: Stabilization of grad(p)*grad(p_test) over edge
#   - gls: Collection of Garlerkin Least Squares (GLS) parameters
#     - enable: Enable GLS stabilization
#     - tau_energy: Stabilization with energy eq. residual
#     - tau_heatflux: Stabilization with heatflu_x_w eq. residual
#     - tau_mass: Stabilization with mass eq. residual
#     - tau_momentum: Stabilization with momentum eq. residual
#     - tau_stress: Stabilization with stress eq. residual
elements:
  theta:
    shape: Lagrange
    degree: 1
  s:
    shape: Lagrange
    degree: 2
  p:
    shape: Lagrange
    degree: 1
  u:
    shape: Lagrange
    degree: 1
  sigma:
    shape: Lagrange
    degree: 2
stabilization:
  cip:
    enable: False
    delta_theta: 1.0
    delta_u: 1.0
    delta_p: 0.1
  gls:
    enable: False
    tau_energy: 0.001
    tau_heatflux: 0.001
    tau_mass: 0.01
    tau_momentum: 0.01
    tau_stress: 0.01

# Formulation Parameters
# ======================
# - nsd: Number of spatial dimensions == 2
# - mode: Formulation mode, one of heat, stress, r13
# - heat_source: Heat source function for mode==heat||r13
# - mass_source: Mass source function for mode==stress||r13
# - body_force: Body force for mode==stress||r13
# - f_s: Heatflux force for mode==heat||r13
# - f_sigma: Stress force for mode==stress||r13
nsd: 3
mode: r13
heat_source: "2*(-1 + x[0])*x[0]*(-1 + x[1])*x[1]*(-1 + x[2])*x[2]*((-1 + x[0])*x[0]*(-1 + x[1])*x[1]*(-1 + x[2]) + (-1 + x[0])*x[0]*(-1 + x[1])*x[1]*x[2] + (-1 + x[0])*x[0]*(-1 + x[1])*(-1 + x[2])*x[2] + (-1 + x[0])*x[0]*x[1]*(-1 + x[2])*x[2] + (-1 + x[0])*(-1 + x[1])*x[1]*(-1 + x[2])*x[2] + x[0]*(-1 + x[1])*x[1]*(-1 + x[2])*x[2])"
mass_source: 0
body_force: [
  "-2*std::pow(-1 + x[0],2)*std::pow(x[0],2)*(-1 + x[1])*x[1]*(-1 + x[2])*x[2]*((-1 + x[2])*x[2] + std::pow(x[1],2)*(-2 + 4*x[2]) - 2*x[1]*(-1 + x[2] + std::pow(x[2],2)))",
  "-2*(-1 + x[0])*x[0]*std::pow(-1 + x[1],2)*std::pow(x[1],2)*(-1 + x[2])*x[2]*((-1 + x[2])*x[2] + std::pow(x[0],2)*(-2 + 4*x[2]) - 2*x[0]*(-1 + x[2] + std::pow(x[2],2)))",
  "2*(-1 + x[0])*x[0]*(-1 + x[1])*x[1]*(-1 + x[2])*x[2]*(2*(-1 + x[1])*x[1]*(-1 + x[2])*x[2] + std::pow(x[0],2)*(std::pow(x[1],2)*(3 - 6*x[2]) + 2*(-1 + x[2])*x[2] + x[1]*(-3 + 10*x[2] - 4*std::pow(x[2],2))) + x[0]*(-2*(-1 + x[2])*x[2] + std::pow(x[1],2)*(-3 + 10*x[2] - 4*std::pow(x[2],2)) + x[1]*(3 - 14*x[2] + 8*std::pow(x[2],2))))"
]
f_s: [
  "(2*(-108*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 9*x[0]*(-1 + x[1])*x[1]*(-1 + x[2])*x[2]*(16*(-1 + x[2])*x[2] + x[1]*(-16 + 131*x[2] - 99*std::pow(x[2],2)) + std::pow(x[1],2)*(16 - 99*x[2] + 67*std::pow(x[2],2))) + 2*std::pow(x[0],4)*(-18*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 123*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],4)*(-18 + 78*x[2] - 13*std::pow(x[2],2) - 70*std::pow(x[2],3) + 5*std::pow(x[2],4)) + 4*std::pow(x[1],3)*(9 - 39*x[2] + 14*std::pow(x[2],2) + 20*std::pow(x[2],3) + 5*std::pow(x[2],4)) - 2*std::pow(x[1],2)*(9 - 39*x[2] + 83*std::pow(x[2],2) - 118*std::pow(x[2],3) + 74*std::pow(x[2],4))) - 2*std::pow(x[0],3)*(-36*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 390*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],2)*(-36 + 300*x[2] - 1151*std::pow(x[2],2) + 1534*std::pow(x[2],3) - 683*std::pow(x[2],4)) + std::pow(x[1],4)*(-36 + 300*x[2] - 413*std::pow(x[2],2) + 58*std::pow(x[2],3) + 55*std::pow(x[2],4)) + 2*std::pow(x[1],3)*(36 - 300*x[2] + 587*std::pow(x[2],2) - 406*std::pow(x[2],3) + 119*std::pow(x[2],4))) + std::pow(x[0],2)*(-36*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 678*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],2)*(-36 + 588*x[2] - 3437*std::pow(x[2],2) + 4954*std::pow(x[2],3) - 2105*std::pow(x[2],4)) + std::pow(x[1],4)*(-36 + 588*x[2] - 1835*std::pow(x[2],2) + 1750*std::pow(x[2],3) - 503*std::pow(x[2],4)) + 2*std::pow(x[1],3)*(36 - 588*x[2] + 2297*std::pow(x[2],2) - 2674*std::pow(x[2],3) + 965*std::pow(x[2],4)))))/75.",
  "(2*(-36*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 6*x[0]*x[1]*(-24 + 113*x[1] - 130*std::pow(x[1],2) + 41*std::pow(x[1],3))*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[0],4)*(-108*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 9*x[1]*x[2]*(-16 + 115*x[2] - 166*std::pow(x[2],2) + 67*std::pow(x[2],3)) + std::pow(x[1],2)*(-36 + 588*x[2] - 1835*std::pow(x[2],2) + 1750*std::pow(x[2],3) - 503*std::pow(x[2],4)) + 2*std::pow(x[1],4)*(-18 + 78*x[2] - 13*std::pow(x[2],2) - 70*std::pow(x[2],3) + 5*std::pow(x[2],4)) - 2*std::pow(x[1],3)*(-36 + 300*x[2] - 413*std::pow(x[2],2) + 58*std::pow(x[2],3) + 55*std::pow(x[2],4))) + 2*std::pow(x[0],3)*(108*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 9*x[1]*x[2]*(-16 + 131*x[2] - 198*std::pow(x[2],2) + 83*std::pow(x[2],3)) + 4*std::pow(x[1],4)*(9 - 39*x[2] + 14*std::pow(x[2],2) + 20*std::pow(x[2],3) + 5*std::pow(x[2],4)) - 2*std::pow(x[1],3)*(36 - 300*x[2] + 587*std::pow(x[2],2) - 406*std::pow(x[2],3) + 119*std::pow(x[2],4)) + std::pow(x[1],2)*(36 - 588*x[2] + 2297*std::pow(x[2],2) - 2674*std::pow(x[2],3) + 965*std::pow(x[2],4))) - std::pow(x[0],2)*(108*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 9*x[1]*x[2]*(-16 + 163*x[2] - 262*std::pow(x[2],2) + 115*std::pow(x[2],3)) + 4*std::pow(x[1],4)*(9 - 39*x[2] + 83*std::pow(x[2],2) - 118*std::pow(x[2],3) + 74*std::pow(x[2],4)) - 2*std::pow(x[1],3)*(36 - 300*x[2] + 1151*std::pow(x[2],2) - 1534*std::pow(x[2],3) + 683*std::pow(x[2],4)) + std::pow(x[1],2)*(36 - 588*x[2] + 3437*std::pow(x[2],2) - 4954*std::pow(x[2],3) + 2105*std::pow(x[2],4)))))/75.",
  "(2*(-36*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 12*x[0]*std::pow(-1 + x[1],2)*std::pow(x[1],2)*x[2]*(-12 + 49*x[2] - 50*std::pow(x[2],2) + 13*std::pow(x[2],3)) - std::pow(x[0],2)*(36*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 12*x[1]*x[2]*(-12 + 49*x[2] - 50*std::pow(x[2],2) + 13*std::pow(x[2],3)) + std::pow(x[1],4)*(108 - 945*x[2] + 1565*std::pow(x[2],2) - 646*std::pow(x[2],3) + 26*std::pow(x[2],4)) + 2*std::pow(x[1],3)*(-108 + 1089*x[2] - 1937*std::pow(x[2],2) + 814*std::pow(x[2],3) + 34*std::pow(x[2],4)) + std::pow(x[1],2)*(108 - 1377*x[2] + 2897*std::pow(x[2],2) - 1582*std::pow(x[2],3) + 62*std::pow(x[2],4))) + std::pow(x[0],4)*(-36*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 12*x[1]*x[2]*(-12 + 49*x[2] - 50*std::pow(x[2],2) + 13*std::pow(x[2],3)) + std::pow(x[1],2)*(-108 + 945*x[2] - 1565*std::pow(x[2],2) + 646*std::pow(x[2],3) - 26*std::pow(x[2],4)) + std::pow(x[1],4)*(-108 + 513*x[2] - 233*std::pow(x[2],2) - 290*std::pow(x[2],3) + 10*std::pow(x[2],4)) - 2*std::pow(x[1],3)*(-108 + 657*x[2] - 605*std::pow(x[2],2) - 122*std::pow(x[2],3) + 70*std::pow(x[2],4))) - 2*std::pow(x[0],3)*(-36*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 12*x[1]*x[2]*(-12 + 49*x[2] - 50*std::pow(x[2],2) + 13*std::pow(x[2],3)) + std::pow(x[1],2)*(-108 + 1089*x[2] - 1937*std::pow(x[2],2) + 814*std::pow(x[2],3) + 34*std::pow(x[2],4)) + std::pow(x[1],4)*(-108 + 657*x[2] - 605*std::pow(x[2],2) - 122*std::pow(x[2],3) + 70*std::pow(x[2],4)) - 2*std::pow(x[1],3)*(-108 + 801*x[2] - 977*std::pow(x[2],2) + 46*std::pow(x[2],3) + 130*std::pow(x[2],4)))))/75."
]
f_sigma: [
  [
    "(-36*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 8*x[0]*(-1 + x[1])*x[1]*(-1 + x[2])*x[2]*(-13*(-1 + x[2])*x[2] + x[1]*(-11 + 25*x[2] - 3*std::pow(x[2],2)) + std::pow(x[1],2)*(11 - 51*x[2] + 29*std::pow(x[2],2))) + std::pow(x[0],4)*(-12*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 64*x[1]*x[2]*(-1 + 4*x[2] - 4*std::pow(x[2],2) + std::pow(x[2],3)) + std::pow(x[1],2)*(-36 + 400*x[2] - 801*std::pow(x[2],2) + 434*std::pow(x[2],3) - 33*std::pow(x[2],4)) + std::pow(x[1],4)*(-36 + 208*x[2] - 177*std::pow(x[2],2) - 46*std::pow(x[2],3) + 15*std::pow(x[2],4)) - 2*std::pow(x[1],3)*(-36 + 272*x[2] - 361*std::pow(x[2],2) + 66*std::pow(x[2],3) + 23*std::pow(x[2],4))) + 2*std::pow(x[0],3)*(12*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 8*x[1]*x[2]*(8 - 19*x[2] + 6*std::pow(x[2],2) + 5*std::pow(x[2],3)) + std::pow(x[1],2)*(36 - 488*x[2] + 769*std::pow(x[2],2) - 18*std::pow(x[2],3) - 263*std::pow(x[2],4)) + std::pow(x[1],4)*(36 - 296*x[2] + 457*std::pow(x[2],2) - 162*std::pow(x[2],3) + std::pow(x[2],4)) + 6*std::pow(x[1],3)*(-12 + 120*x[2] - 179*std::pow(x[2],2) + 22*std::pow(x[2],3) + 37*std::pow(x[2],4))) - std::pow(x[0],2)*(12*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 8*x[1]*x[2]*(8 + 7*x[2] - 46*std::pow(x[2],2) + 31*std::pow(x[2],3)) + std::pow(x[1],2)*(36 - 664*x[2] + 921*std::pow(x[2],2) + 382*std::pow(x[2],3) - 639*std::pow(x[2],4)) + 2*std::pow(x[1],3)*(-36 + 536*x[2] - 1105*std::pow(x[2],2) + 498*std::pow(x[2],3) + 71*std::pow(x[2],4)) + std::pow(x[1],4)*(36 - 472*x[2] + 1233*std::pow(x[2],2) - 1010*std::pow(x[2],3) + 249*std::pow(x[2],4))))/30.",
    "(-62*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 12*x[0]*(-1 + x[1])*x[1]*(-1 + x[2])*x[2]*(4*(-1 + x[2])*x[2] + x[1]*(9 + 22*x[2] - 40*std::pow(x[2],2)) + std::pow(x[1],2)*(-9 - 14*x[2] + 32*std::pow(x[2],2))) + std::pow(x[0],4)*(-2*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 12*x[1]*x[2]*(-1 + 5*x[2] - 6*std::pow(x[2],2) + 2*std::pow(x[2],3)) + std::pow(x[1],2)*(-20 + 156*x[2] - 261*std::pow(x[2],2) + 138*std::pow(x[2],3) - 33*std::pow(x[2],4)) + std::pow(x[1],3)*(40 - 264*x[2] + 306*std::pow(x[2],2) - 36*std::pow(x[2],3) - 6*std::pow(x[2],4)) + 5*std::pow(x[1],4)*(-4 + 24*x[2] - 21*std::pow(x[2],2) - 6*std::pow(x[2],3) + 3*std::pow(x[2],4))) - 2*std::pow(x[0],3)*(-2*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 12*x[1]*x[2]*(-1 + 9*x[2] - 14*std::pow(x[2],2) + 6*std::pow(x[2],3)) + std::pow(x[1],2)*(-20 + 48*x[2] - 93*std::pow(x[2],2) + 234*std::pow(x[2],3) - 189*std::pow(x[2],4)) + std::pow(x[1],4)*(-20 + 12*x[2] + 207*std::pow(x[2],2) - 222*std::pow(x[2],3) + 3*std::pow(x[2],4)) + 2*std::pow(x[1],3)*(20 - 24*x[2] - 111*std::pow(x[2],2) + 78*std::pow(x[2],3) + 57*std::pow(x[2],4))) - std::pow(x[0],2)*(2*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 12*x[1]*x[2]*(-1 + 17*x[2] - 30*std::pow(x[2],2) + 14*std::pow(x[2],3)) + std::pow(x[1],4)*(20 + 204*x[2] - 459*std::pow(x[2],2) - 138*std::pow(x[2],3) + 393*std::pow(x[2],4)) - 2*std::pow(x[1],3)*(20 + 192*x[2] - 267*std::pow(x[2],2) - 474*std::pow(x[2],3) + 549*std::pow(x[2],4)) + std::pow(x[1],2)*(20 + 168*x[2] + 129*std::pow(x[2],2) - 1170*std::pow(x[2],3) + 873*std::pow(x[2],4))))/30.",
    "(47*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 6*x[0]*(-1 + x[1])*x[1]*(-1 + x[2])*x[2]*(-((-1 + x[2])*x[2]) + x[1]*(-2 + 48*x[2] - 44*std::pow(x[2],2)) + std::pow(x[1],2)*(2 - 50*x[2] + 46*std::pow(x[2],2))) + 2*std::pow(x[0],3)*(-20*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 6*x[1]*x[2]*(-3 + 28*x[2] - 44*std::pow(x[2],2) + 19*std::pow(x[2],3)) + std::pow(x[1],2)*(-17 + 162*x[2] - 363*std::pow(x[2],2) + 282*std::pow(x[2],3) - 81*std::pow(x[2],4)) + std::pow(x[1],3)*(34 - 252*x[2] + 294*std::pow(x[2],2) + 12*std::pow(x[2],3) - 54*std::pow(x[2],4)) + std::pow(x[1],4)*(-17 + 108*x[2] - 99*std::pow(x[2],2) - 30*std::pow(x[2],3) + 21*std::pow(x[2],4))) + std::pow(x[0],4)*(20*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 6*x[1]*x[2]*(-3 + 29*x[2] - 46*std::pow(x[2],2) + 20*std::pow(x[2],3)) + std::pow(x[1],4)*(17 - 96*x[2] + 69*std::pow(x[2],2) + 42*std::pow(x[2],3) - 15*std::pow(x[2],4)) + 2*std::pow(x[1],3)*(-17 + 114*x[2] - 123*std::pow(x[2],2) - 6*std::pow(x[2],3) + 15*std::pow(x[2],4)) + std::pow(x[1],2)*(17 - 150*x[2] + 351*std::pow(x[2],2) - 306*std::pow(x[2],3) + 105*std::pow(x[2],4))) + std::pow(x[0],2)*(20*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 6*x[1]*x[2]*(-3 + 26*x[2] - 40*std::pow(x[2],2) + 17*std::pow(x[2],3)) - 2*std::pow(x[1],3)*(17 - 150*x[2] + 477*std::pow(x[2],2) - 558*std::pow(x[2],3) + 231*std::pow(x[2],4)) + std::pow(x[1],4)*(17 - 132*x[2] + 441*std::pow(x[2],2) - 558*std::pow(x[2],3) + 249*std::pow(x[2],4)) + std::pow(x[1],2)*(17 - 186*x[2] + 669*std::pow(x[2],2) - 798*std::pow(x[2],3) + 315*std::pow(x[2],4))))/15."
  ], [
    "(-62*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 12*x[0]*(-1 + x[1])*x[1]*(-1 + x[2])*x[2]*(4*(-1 + x[2])*x[2] + x[1]*(9 + 22*x[2] - 40*std::pow(x[2],2)) + std::pow(x[1],2)*(-9 - 14*x[2] + 32*std::pow(x[2],2))) + std::pow(x[0],4)*(-2*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 12*x[1]*x[2]*(-1 + 5*x[2] - 6*std::pow(x[2],2) + 2*std::pow(x[2],3)) + std::pow(x[1],2)*(-20 + 156*x[2] - 261*std::pow(x[2],2) + 138*std::pow(x[2],3) - 33*std::pow(x[2],4)) + std::pow(x[1],3)*(40 - 264*x[2] + 306*std::pow(x[2],2) - 36*std::pow(x[2],3) - 6*std::pow(x[2],4)) + 5*std::pow(x[1],4)*(-4 + 24*x[2] - 21*std::pow(x[2],2) - 6*std::pow(x[2],3) + 3*std::pow(x[2],4))) - 2*std::pow(x[0],3)*(-2*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 12*x[1]*x[2]*(-1 + 9*x[2] - 14*std::pow(x[2],2) + 6*std::pow(x[2],3)) + std::pow(x[1],2)*(-20 + 48*x[2] - 93*std::pow(x[2],2) + 234*std::pow(x[2],3) - 189*std::pow(x[2],4)) + std::pow(x[1],4)*(-20 + 12*x[2] + 207*std::pow(x[2],2) - 222*std::pow(x[2],3) + 3*std::pow(x[2],4)) + 2*std::pow(x[1],3)*(20 - 24*x[2] - 111*std::pow(x[2],2) + 78*std::pow(x[2],3) + 57*std::pow(x[2],4))) - std::pow(x[0],2)*(2*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 12*x[1]*x[2]*(-1 + 17*x[2] - 30*std::pow(x[2],2) + 14*std::pow(x[2],3)) + std::pow(x[1],4)*(20 + 204*x[2] - 459*std::pow(x[2],2) - 138*std::pow(x[2],3) + 393*std::pow(x[2],4)) - 2*std::pow(x[1],3)*(20 + 192*x[2] - 267*std::pow(x[2],2) - 474*std::pow(x[2],3) + 549*std::pow(x[2],4)) + std::pow(x[1],2)*(20 + 168*x[2] + 129*std::pow(x[2],2) - 1170*std::pow(x[2],3) + 873*std::pow(x[2],4))))/30.",
    "(-12*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 8*x[0]*(-1 + x[1])*x[1]*(-1 + x[2])*x[2]*(17*(-1 + x[2])*x[2] + x[1]*(-8 + 58*x[2] - 42*std::pow(x[2],2)) + 8*std::pow(x[1],2)*(1 - 3*x[2] + std::pow(x[2],2))) - 2*std::pow(x[0],3)*(-36*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 8*x[1]*x[2]*(19 - 11*x[2] - 54*std::pow(x[2],2) + 46*std::pow(x[2],3)) + std::pow(x[1],2)*(-36 - 184*x[2] + 335*std::pow(x[2],2) + 498*std::pow(x[2],3) - 649*std::pow(x[2],4)) + std::pow(x[1],4)*(-36 + 272*x[2] - 361*std::pow(x[2],2) + 66*std::pow(x[2],3) + 23*std::pow(x[2],4)) + 6*std::pow(x[1],3)*(12 - 40*x[2] + 19*std::pow(x[2],2) - 22*std::pow(x[2],3) + 43*std::pow(x[2],4))) + std::pow(x[0],4)*(-36*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 8*x[1]*x[2]*(19 - 28*x[2] - 20*std::pow(x[2],2) + 29*std::pow(x[2],3)) + 2*std::pow(x[1],3)*(36 - 56*x[2] - 263*std::pow(x[2],2) + 318*std::pow(x[2],3) + std::pow(x[2],4)) + std::pow(x[1],4)*(-36 + 208*x[2] - 177*std::pow(x[2],2) - 46*std::pow(x[2],3) + 15*std::pow(x[2],4)) - std::pow(x[1],2)*(36 + 248*x[2] - 927*std::pow(x[2],2) + 430*std::pow(x[2],3) + 249*std::pow(x[2],4))) - std::pow(x[0],2)*(36*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 8*x[1]*x[2]*(19 + 23*x[2] - 122*std::pow(x[2],2) + 80*std::pow(x[2],3)) + std::pow(x[1],4)*(36 - 400*x[2] + 801*std::pow(x[2],2) - 434*std::pow(x[2],3) + 33*std::pow(x[2],4)) - 2*std::pow(x[1],3)*(36 - 248*x[2] + 769*std::pow(x[2],2) - 978*std::pow(x[2],3) + 457*std::pow(x[2],4)) + std::pow(x[1],2)*(36 + 56*x[2] + 921*std::pow(x[2],2) - 2498*std::pow(x[2],3) + 1521*std::pow(x[2],4))))/30.",
    "(20*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 6*x[0]*(-1 + x[1])*x[1]*(-1 + x[2])*x[2]*(9*(-1 + x[2])*x[2] + x[1]*(7 + 24*x[2] - 38*std::pow(x[2],2)) + std::pow(x[1],2)*(-7 - 6*x[2] + 20*std::pow(x[2],2))) + 2*std::pow(x[0],3)*(-17*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 6*x[1]*x[2]*(-2 + 31*x[2] - 54*std::pow(x[2],2) + 25*std::pow(x[2],3)) + std::pow(x[1],2)*(-47 + 270*x[2] - 477*std::pow(x[2],2) + 438*std::pow(x[2],3) - 231*std::pow(x[2],4)) + std::pow(x[1],4)*(-47 + 234*x[2] - 123*std::pow(x[2],2) - 126*std::pow(x[2],3) + 15*std::pow(x[2],4)) + 2*std::pow(x[1],3)*(47 - 246*x[2] + 207*std::pow(x[2],2) + 6*std::pow(x[2],3) + 33*std::pow(x[2],4))) + std::pow(x[0],4)*(17*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 12*x[1]*x[2]*(-1 + 11*x[2] - 18*std::pow(x[2],2) + 8*std::pow(x[2],3)) + std::pow(x[1],4)*(47 - 276*x[2] + 249*std::pow(x[2],2) + 42*std::pow(x[2],3) - 15*std::pow(x[2],4)) + std::pow(x[1],3)*(-94 + 576*x[2] - 558*std::pow(x[2],2) - 60*std::pow(x[2],3) + 42*std::pow(x[2],4)) + std::pow(x[1],2)*(47 - 312*x[2] + 441*std::pow(x[2],2) - 198*std::pow(x[2],3) + 69*std::pow(x[2],4))) + std::pow(x[0],2)*(17*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 6*x[1]*x[2]*(-2 + 49*x[2] - 90*std::pow(x[2],2) + 43*std::pow(x[2],3)) + std::pow(x[1],3)*(-94 + 324*x[2] - 366*std::pow(x[2],2) + 564*std::pow(x[2],3) - 522*std::pow(x[2],4)) + std::pow(x[1],4)*(47 - 150*x[2] - 9*std::pow(x[2],2) + 54*std::pow(x[2],3) + 105*std::pow(x[2],4)) + std::pow(x[1],2)*(47 - 186*x[2] + 669*std::pow(x[2],2) - 1158*std::pow(x[2],3) + 675*std::pow(x[2],4))))/15."
  ], [
    "(47*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 6*x[0]*(-1 + x[1])*x[1]*(-1 + x[2])*x[2]*(-((-1 + x[2])*x[2]) + x[1]*(-2 + 48*x[2] - 44*std::pow(x[2],2)) + std::pow(x[1],2)*(2 - 50*x[2] + 46*std::pow(x[2],2))) + 2*std::pow(x[0],3)*(-20*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 6*x[1]*x[2]*(-3 + 28*x[2] - 44*std::pow(x[2],2) + 19*std::pow(x[2],3)) + std::pow(x[1],2)*(-17 + 162*x[2] - 363*std::pow(x[2],2) + 282*std::pow(x[2],3) - 81*std::pow(x[2],4)) + std::pow(x[1],3)*(34 - 252*x[2] + 294*std::pow(x[2],2) + 12*std::pow(x[2],3) - 54*std::pow(x[2],4)) + std::pow(x[1],4)*(-17 + 108*x[2] - 99*std::pow(x[2],2) - 30*std::pow(x[2],3) + 21*std::pow(x[2],4))) + std::pow(x[0],4)*(20*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 6*x[1]*x[2]*(-3 + 29*x[2] - 46*std::pow(x[2],2) + 20*std::pow(x[2],3)) + std::pow(x[1],4)*(17 - 96*x[2] + 69*std::pow(x[2],2) + 42*std::pow(x[2],3) - 15*std::pow(x[2],4)) + 2*std::pow(x[1],3)*(-17 + 114*x[2] - 123*std::pow(x[2],2) - 6*std::pow(x[2],3) + 15*std::pow(x[2],4)) + std::pow(x[1],2)*(17 - 150*x[2] + 351*std::pow(x[2],2) - 306*std::pow(x[2],3) + 105*std::pow(x[2],4))) + std::pow(x[0],2)*(20*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 6*x[1]*x[2]*(-3 + 26*x[2] - 40*std::pow(x[2],2) + 17*std::pow(x[2],3)) - 2*std::pow(x[1],3)*(17 - 150*x[2] + 477*std::pow(x[2],2) - 558*std::pow(x[2],3) + 231*std::pow(x[2],4)) + std::pow(x[1],4)*(17 - 132*x[2] + 441*std::pow(x[2],2) - 558*std::pow(x[2],3) + 249*std::pow(x[2],4)) + std::pow(x[1],2)*(17 - 186*x[2] + 669*std::pow(x[2],2) - 798*std::pow(x[2],3) + 315*std::pow(x[2],4))))/15.",
    "(20*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 6*x[0]*(-1 + x[1])*x[1]*(-1 + x[2])*x[2]*(9*(-1 + x[2])*x[2] + x[1]*(7 + 24*x[2] - 38*std::pow(x[2],2)) + std::pow(x[1],2)*(-7 - 6*x[2] + 20*std::pow(x[2],2))) + 2*std::pow(x[0],3)*(-17*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 6*x[1]*x[2]*(-2 + 31*x[2] - 54*std::pow(x[2],2) + 25*std::pow(x[2],3)) + std::pow(x[1],2)*(-47 + 270*x[2] - 477*std::pow(x[2],2) + 438*std::pow(x[2],3) - 231*std::pow(x[2],4)) + std::pow(x[1],4)*(-47 + 234*x[2] - 123*std::pow(x[2],2) - 126*std::pow(x[2],3) + 15*std::pow(x[2],4)) + 2*std::pow(x[1],3)*(47 - 246*x[2] + 207*std::pow(x[2],2) + 6*std::pow(x[2],3) + 33*std::pow(x[2],4))) + std::pow(x[0],4)*(17*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 12*x[1]*x[2]*(-1 + 11*x[2] - 18*std::pow(x[2],2) + 8*std::pow(x[2],3)) + std::pow(x[1],4)*(47 - 276*x[2] + 249*std::pow(x[2],2) + 42*std::pow(x[2],3) - 15*std::pow(x[2],4)) + std::pow(x[1],3)*(-94 + 576*x[2] - 558*std::pow(x[2],2) - 60*std::pow(x[2],3) + 42*std::pow(x[2],4)) + std::pow(x[1],2)*(47 - 312*x[2] + 441*std::pow(x[2],2) - 198*std::pow(x[2],3) + 69*std::pow(x[2],4))) + std::pow(x[0],2)*(17*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 6*x[1]*x[2]*(-2 + 49*x[2] - 90*std::pow(x[2],2) + 43*std::pow(x[2],3)) + std::pow(x[1],3)*(-94 + 324*x[2] - 366*std::pow(x[2],2) + 564*std::pow(x[2],3) - 522*std::pow(x[2],4)) + std::pow(x[1],4)*(47 - 150*x[2] - 9*std::pow(x[2],2) + 54*std::pow(x[2],3) + 105*std::pow(x[2],4)) + std::pow(x[1],2)*(47 - 186*x[2] + 669*std::pow(x[2],2) - 1158*std::pow(x[2],3) + 675*std::pow(x[2],4))))/15.",
    "(24*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 4*x[0]*(-1 + x[1])*x[1]*(-1 + x[2])*x[2]*(4*(-1 + x[2])*x[2] + x[1]*(-19 + 83*x[2] - 45*std::pow(x[2],2)) + std::pow(x[1],2)*(19 - 75*x[2] + 37*std::pow(x[2],2))) + 2*std::pow(x[0],3)*(-24*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 4*x[1]*x[2]*(11 + 8*x[2] - 60*std::pow(x[2],2) + 41*std::pow(x[2],3)) + std::pow(x[1],2)*(-36 + 152*x[2] - 217*std::pow(x[2],2) + 258*std::pow(x[2],3) - 193*std::pow(x[2],4)) + 6*std::pow(x[1],3)*(12 - 80*x[2] + 99*std::pow(x[2],2) - 22*std::pow(x[2],3) + 3*std::pow(x[2],4)) + std::pow(x[1],4)*(-36 + 284*x[2] - 409*std::pow(x[2],2) + 114*std::pow(x[2],3) + 11*std::pow(x[2],4))) - std::pow(x[0],4)*(-24*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 4*x[1]*x[2]*(11 + 4*x[2] - 52*std::pow(x[2],2) + 37*std::pow(x[2],3)) + std::pow(x[1],2)*(-36 + 76*x[2] + 63*std::pow(x[2],2) + 2*std::pow(x[2],3) - 141*std::pow(x[2],4)) + std::pow(x[1],3)*(72 - 328*x[2] + 98*std::pow(x[2],2) + 252*std::pow(x[2],3) - 22*std::pow(x[2],4)) + std::pow(x[1],4)*(-36 + 208*x[2] - 177*std::pow(x[2],2) - 46*std::pow(x[2],3) + 15*std::pow(x[2],4))) + std::pow(x[0],2)*(24*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 4*x[1]*x[2]*(11 + 16*x[2] - 76*std::pow(x[2],2) + 49*std::pow(x[2],3)) + std::pow(x[1],4)*(36 - 436*x[2] + 1017*std::pow(x[2],2) - 722*std::pow(x[2],3) + 141*std::pow(x[2],4)) - 2*std::pow(x[1],3)*(36 - 392*x[2] + 937*std::pow(x[2],2) - 738*std::pow(x[2],3) + 193*std::pow(x[2],4)) + std::pow(x[1],2)*(36 - 304*x[2] + 921*std::pow(x[2],2) - 1058*std::pow(x[2],3) + 441*std::pow(x[2],4))))/15."
  ]
]

# PETSc Options (dictionary)
# ==========================
# [#1 e.g. for mumps directy solver:]
# - ksp_type: preonly  # preconditioner only, i.e. 1 application
# - pc_type: lu  # use LU as preconditioner <=> direct solve
# - pc_factor_mat_solver_type: mumps  # use mumps sparse solver
# [#2 e.g. for gmres iterative solver with icc preconditioner:]
# - ksp_type: gmres  # Generalized Minimal Residual Method
# - pc_type: icc  # incomplete Cholesky
petsc_options:
  ksp_type: tfqmr
  ksp_rtol: 1E-7
  ksp_max_it: 100000
  ksp_view:
  ksp_monitor_true_residual:
  pc_type: fieldsplit
  pc_fieldsplit_detect_saddle_point:
  # option 1:
  pc_fieldsplit_type: schur
  pc_fieldsplit_schur_fact_type: full
  pc_fieldsplit_schur_precondition: selfp
  fieldsplit_0_ksp_type: preonly
  fieldsplit_0_pc_type: gamg
  fieldsplit_0_pc_gamg_type: classical
  fieldsplit_1_ksp_type: preonly
  fieldsplit_1_pc_type: jacobi
  # option 2:
  # pc_fieldsplit_type: additive
  # fieldsplit_0_ksp_type: preonly
  # fieldsplit_0_pc_type: gamg
  # fieldsplit_1_ksp_type: preonly
  # fieldsplit_1_pc_type: jacobi

# Region Parameters
# =================
# - regs: Dictionary of all mesh regions
#   - reg_id: Must contain the following parameters:
#     - kn: Knudsen number
regs:
  6000:
    kn: 1.0

# Boundary Conditions
# ===================
# - polar_coord_syst: true needs u_n_w,u_t_w; false needs u_x_w,u_y_w,u_z_w
# - bcs: Dictionary of all boundary IDs from mesh
#   - bc_id: must contain the following parameters
#     - chi_tilde: Refaction coefficient in Maxwell accomodation model
#     - theta_w: Value for temperature at wall
#     - u_t_w: Value for tangential velocity at wall (for polar_coord_syst=true)
#     - u_n_w: Value for normal velocity at wall (for polar_coord_syst=true)
#     - u_x_w: Value for x-velocity at wall (for polar_coord_syst=false)
#     - u_y_w: Value for y-velocity at wall (for polar_coord_syst=false)
#     - u_z_w: Value for z-velocity at wall (for polar_coord_syst=false&&nsd=3)
#     - p_w: Value for pressure at wall
#     - epsilon_w: Inflow-model parameter <=> Weight of pressure prescription
polar_coord_syst: False
bcs:
  4000:
    chi_tilde: 1
    theta_w: 0
    u_t_w: 0
    u_n_w: 0
    u_x_w: 0
    u_y_w: 0
    u_z_w: 0
    p_w: 0
    epsilon_w: 0
  4001: # right
    chi_tilde: 1
    theta_w: 0
    u_t_w: 0
    u_n_w: 0
    u_x_w: 0
    u_y_w: 0
    u_z_w: 0
    p_w: 0
    epsilon_w: 0
  4002: # bot
    chi_tilde: 1
    theta_w: 0
    u_t_w: 0
    u_n_w: 0
    u_x_w: 0
    u_y_w: 0
    u_z_w: 0
    p_w: 0
    epsilon_w: 0
  4003:
    chi_tilde: 1
    theta_w: 0
    u_t_w: 0
    u_n_w: 0
    u_x_w: 0
    u_y_w: 0
    u_z_w: 0
    p_w: 0
    epsilon_w: 0
  4004:
    chi_tilde: 1
    theta_w: 0
    u_t_w: 0
    u_n_w: 0
    u_x_w: 0
    u_y_w: 0
    u_z_w: 0
    p_w: 0
    epsilon_w: 0
  4005:
    chi_tilde: 1
    theta_w: 0
    u_t_w: 0
    u_n_w: 0
    u_x_w: 0
    u_y_w: 0
    u_z_w: 0
    p_w: 0
    epsilon_w: 0

# Convergence Study
# =================
# - enable: Enable convergence study on given meshes
# - exact_solution: Path to exact solution in cpp-format to compare errors
# - plot: Show errors in matplotlib window. PDF output is always per default.
# - write_systemmatrix: Writes out systemmatrix (LHS) to use for analysis
# - write_mpi_information: Write dofmap and ownership info per rank
# - rescale_pressure: Shift numerical pressure (False,zeromean,zerominimum)
# - relative_errors: Use relative errors. If exact sol. is zero, use absolute.
convergence_study:
  enable: True
  exact_solution: esols/3d.cpp
  plot: False # to avoid error exit code due to $DISPLAY
  write_systemmatrix: False
  write_mpi_information: False
  rescale_pressure: zerominimum
  relative_error: True

# Postprocessing
# ==============
# - write_pdfs: Write all solution fields as PDF plot
# - write_vecs: Write all solution fields as vectors
# - flows: List of BC IDs for <mass|heat> flow J=int_bc dot(<u|s>,n)dl
# - line_integrals: List of line integral dicts:
#   - name: Name for output
#   - expr: Expression to evaluate
#   - start: Start point
#   - end: End point
#   - res: Sampling resolution of line
postprocessing:
  write_pdfs: False
  write_vecs: False
  flows: []
  line_integrals: []

# Parameter Study
# ==============
# - enable: Repeat simulation with different p. values (study)
# - parameter_key: Key as list, e.g. ["elemenets", "p", "degree"]
# - parameter_values: List of value for parameter, e.g. [0.01,0.1,1,10]
parameter_study:
  enable: False
  parameter_key: []
  parameter_values: []
