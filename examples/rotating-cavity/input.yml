# General
# =======
# - output_folder: Used as output folder
output_folder: results_rotating_cavity

# Meshes
# ======
# - meshes: List of input meshes in h5 format to run simulations on
meshes:
  # - lid_0.1_4.h5
  # - lid_0.2_4.h5
  # - lid_0.3_4.h5
  # - lid_0.4_4.h5
  # - lid_0.5_4.h5
  # - lid2_0.65_4.h5
  # - lid2_0.65_5.h5
  # - lid2_0.65_6.h5
  - lid2_0.65_7.h5
  # - lid_0.65_4.h5
  # - lid_0.65_5.h5
  # - lid_0.65_6.h5
  # - lid_0.65_7.h5
  # - lid_0.65_8.h5
  # - lid_0.65_9.h5
  # - lid5.h5
  # - lid6.h5
  # - lid7.h5

# Numerical Parameters
# ====================
# - elements: Must contain the fields: theta, s, p, u, sigma
#   - fields: List of FEM parameters (shape, degree)
#     - shape: Element shape, e.g. Lagrange
#     - degree: Element degree, e.g. 2
# - stabilization: Must contain cip and gls
#   - cip: Collection of Continous Interior Penalty (CIP) parameters
#     - enable: Enable CIP stabilization
#     - delta_theta: Stabilization of grad(T)*grad(T_test) over edge
#     - delta_u: Stabilization of grad(u)*grad(u_test) over edge
#     - delta_p: Stabilization of grad(p)*grad(p_test) over edge
#   - gls: Collection of Garlerkin Least Squares (GLS) parameters
#     - enable: Enable GLS stabilization
#     - tau_energy: Stabilization with energy eq. residual
#     - tau_heatflux: Stabilization with heatflu_x_w eq. residual
#     - tau_mass: Stabilization with mass eq. residual
#     - tau_momentum: Stabilization with momentum eq. residual
#     - tau_stress: Stabilization with stress eq. residual
elements:
  theta:
    shape: Lagrange
    degree: 1
  s:
    shape: Lagrange
    degree: 2
  p:
    shape: Lagrange
    degree: 1
  u:
    shape: Lagrange
    degree: 1
  sigma:
    shape: Lagrange
    degree: 2
stabilization:
  cip:
    enable: False
    delta_theta: 1.0
    delta_u: 1.0
    delta_p: 0.1
  gls:
    enable: False
    tau_energy: 0.001
    tau_heatflux: 0.001
    tau_mass: 0.01
    tau_momentum: 0.01
    tau_stress: 0.01

# Formulation Parameters
# ======================
# - nsd: Number of spatial dimensions == 2
# - mode: Formulation mode, one of heat, stress, r13
# - heat_source: Heat source function for mode==heat||r13
# - mass_source: Mass source function for mode==stress||r13
# - body_force: Body force for mode==stress||r13
# - f_s: Heatflux force for mode==heat||r13
# - f_sigma: Stress force for mode==stress||r13
nsd: 2
mode: r13
heat_source: 0
mass_source: 0
body_force: [0,0]
f_s: [0,0]
f_sigma: [[0,0],[0,0]]

# PETSc Options (dictionary)
# ==========================
# [#1 e.g. for mumps directy solver:]
# - ksp_type: preonly  # preconditioner only, i.e. 1 application
# - pc_type: lu  # use LU as preconditioner <=> direct solve
# - pc_factor_mat_solver_type: mumps  # use mumps sparse solver
# [#2 e.g. for gmres iterative solver with icc preconditioner:]
# - ksp_type: gmres  # Generalized Minimal Residual Method
# - pc_type: icc  # incomplete Cholesky
petsc_options:
  ksp_type: preonly
  pc_type: lu
  pc_factor_mat_solver_type: mumps

# Region Parameters
# =================
# - regs: Dictionary of all mesh regions
#   - reg_id: Must contain the following parameters:
#     - kn: Knudsen number
regs:
  4000:
    kn: 5E-2

# Boundary Conditions
# ===================
# - polar_coord_syst: true needs u_n_w,u_t_w; false needs u_x_w,u_y_w,u_z_w
# - bcs: Dictionary of all boundary IDs from mesh
#   - bc_id: must contain the following parameters
#     - chi_tilde: Refaction coefficient in Maxwell accomodation model
#     - theta_w: Value for temperature at wall
#     - u_t_w: Value for tangential velocity at wall (for polar_coord_syst=true)
#     - u_n_w: Value for normal velocity at wall (for polar_coord_syst=true)
#     - u_x_w: Value for x-velocity at wall (for polar_coord_syst=false)
#     - u_y_w: Value for y-velocity at wall (for polar_coord_syst=false)
#     - u_z_w: Value for z-velocity at wall (for polar_coord_syst=false&&nsd=3)
#     - p_w: Value for pressure at wall
#     - epsilon_w: Inflow-model parameter <=> Weight of pressure prescription
polar_coord_syst: True
bcs:
  3000: # upper
    # chi_tilde: 0.01-0.5*0.7*cos(2*3.141592653589793*x[0]) + 0.5*0.7
    chi_tilde: 1.0
    # chi_tilde: "0.01+0.5*(tanh(100*(x[0]-0.1))+1)-0.5*(tanh(100*(x[0]-0.9))+1)"
    # chi_tilde: 1.0
    theta_w: 2
    u_t_w: 0
    u_n_w: 0
    u_x_w: 1E300
    u_y_w: 1E300
    u_z_w: 1E300
    p_w: 0
    epsilon_w: 0
  3100: # lowerleft
    # chi_tilde: -0.5*cos(2*3.141592653589793*x[0]) + 0.5
    # chi_tilde: 0.01
    # chi_tilde: "0.65 < x[0] < 0.85 ? 1.0 : 0.1"
    # chi_tilde: "x[0] < 0.65 ? 1.0 : 1.0"
    # chi_tilde: "x[0] < 0.65 ? 1E-9 : 1.0"
    chi_tilde: 1.0
    # chi_tilde: "x[0] < 0.65 ? 0.01 : 0.01 + 0.09*(x[0]-0.5)/0.5"
    # chi_tilde: "0.01+0.5*(tanh(10*(x[0]-0.5))+1)"
    # chi_tilde: "0.01+1/((1/10)*pi) * exp(-(x-0.5)/(1/10))^2)"
    # chi_tilde: "0.01+(1-0.99)*exp(-(10*(x[0]-0.65))*(10*(x[0]-0.65)))"
    # chi_tilde: "0.1+0.5*(tanh(100*(x[0]-0.6))+1)-0.5*(tanh(100*(x[0]-0.9))+1)"
    # theta_w: -0.5*cos(2*3.141592653589793*x[0]) + 0.5
    # theta_w: 3
    # theta_w: "x[0] < 0.65 ? 1.0 : 3.0"
    # theta_w: "x[0] < 0.65 ? 1.0 : 1.0 + (x[0]-0.65)/0.35 * (3.0-1.0)"
    # theta_w: "1+x[0]"
    # theta_w: "x[0] < 0.5? 1.0 : 1-0.5*cos(2*3.141592653589793*2*(x[0]-0.5))+0.5"
    theta_w: 2.0
    u_t_w: 0
    u_n_w: 0
    u_x_w: 1E300
    u_y_w: 1E300
    u_z_w: 1E300
    p_w: 0
    epsilon_w: 0
  # 3400: # lowerright
  #   # chi_tilde: -0.5*cos(2*3.141592653589793*x[0]) + 0.5
  #   # chi_tilde: 1.0
  #   # chi_tilde: 1.0
  #   chi_tilde: 0.01
  #   theta_w: 3
  #   u_t_w: 0
  #   u_n_w: 0
  #   u_x_w: 1E300
  #   u_y_w: 1E300
  #   u_z_w: 1E300
  #   p_w: 0
  #   epsilon_w: 0
  3200: # left
    chi_tilde: 1.0
    theta_w: 1
    u_t_w: 0
    u_n_w: 0
    u_x_w: 1E300
    u_y_w: 1E300
    u_z_w: 1E300
    p_w: 0
    epsilon_w: 0
  3300: # right
    chi_tilde: 1.0
    theta_w: 1
    u_t_w: 0
    u_n_w: 0
    u_x_w: 1E300
    u_y_w: 1E300
    u_z_w: 1E300
    p_w: 0
    epsilon_w: 0

# Convergence Study
# =================
# - enable: Enable convergence study on given meshes
# - exact_solution: Path to exact solution in cpp-format to compare errors
# - plot: Show errors in matplotlib window. PDF output is always per default.
# - write_systemmatrix: Writes out systemmatrix (LHS) to use for analysis
# - write_mpi_information: Write dofmap and ownership info per rank
# - rescale_pressure: Shift numerical pressure (False,zeromean,zerominimum)
# - relative_errors: Use relative errors. If exact sol. is zero, use absolute.
convergence_study:
  enable: False
  exact_solution: esols/01_coeffs.cpp
  plot: False # to avoid error exit code due to $DISPLAY
  write_systemmatrix: False
  write_mpi_information: False
  rescale_pressure: zeromean
  relative_error: True

# Postprocessing
# ==============
# - write_pdfs: Write all solution fields as PDF plot
# - write_vecs: Write all solution fields as vectors
# - flows: List of BC IDs for <mass|heat> flow J=int_bc dot(<u|s>,n)dl
# - line_integrals: List of line integral dicts:
#   - name: Name for output
#   - expr: Expression to evaluate
#   - start: Start point
#   - end: End point
#   - res: Sampling resolution of line
postprocessing:
  write_pdfs: True
  write_vecs: False
  flows: []
  line_integrals: []

# Parameter Study
# ==============
# - enable: Repeat simulation with different p. values (study)
# - parameter_key: Key as list, e.g. ["elemenets", "p", "degree"]
# - parameter_values: List of value for parameter, e.g. [0.01,0.1,1,10]
parameter_study:
  enable: True
  parameter_key: ["regs", 4000, "kn"]
  parameter_values: [
    0.0015103054493884667, 0.0017368512667967366, 0.0019973789568162466, 0.0022969858003386834, 0.0026415336703894863, 0.0030377637209479088, 0.0034934282790900946, 0.004017442520953609, 0.00462005889909665, 0.0053130677339611465, 0.006110027894055318, 0.007026532078163616, 0.008080511889888158, 0.00929258867337138, 0.010686476974377086, 0.012289448520533649, 0.014132865798613696, 0.016252795668405748, 0.018690715018666607, 0.021494322271466595, 0.024718470612186585, 0.02842624120401457, 0.032690177384616756, 0.03759370399230927, 0.043232759591155655, 0.049717673529829, 0.05717532455930333, 0.06575162324319883, 0.07561436672967865, 0.08695652173913045, 0.1, 0.11499999999999999, 0.13224999999999998, 0.15208749999999996, 0.17490062499999995, 0.20113571874999994, 0.2313060765624999, 0.26600198804687486, 0.3059022862539061, 0.35178762919199197, 0.4045557735707907, 0.4652391396064093, 0.5350250105473706, 0.6152787621294762, 0.7075705764488975, 0.8137061629162322, 0.9357620873536668, 1.0761264004567168, 1.2375453605252242, 1.4231771646040077, 1.636653739294609, 1.8821518001888, 2.1644745702171195, 2.4891457557496874, 2.8625176191121406, 3.2918952619789614, 3.7856795512758055, 4.353531483967176, 5.006561206562252, 5.757545387546589, 6.621177195678577
  ]
